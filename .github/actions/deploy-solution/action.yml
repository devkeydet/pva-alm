name: 'deploy solution'

description: 'deploy solution'

inputs:
  environment_url:
    description: 'environment_url'
    required: true
  solution_name:
    description: 'solution_name'
    required: true
  environment:
    description: 'environment'
    required: true
  unmanaged:
    description: 'unmanaged'
    required: false
    default: 'false'
  tag:
    description: 'tag'
    required: false
  secrets:
    description: 'secrets'
    required: true

runs:
  using: "composite"
  steps:
    - name: mask-inputs
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.environment_url }}"      
        
    - run: |
        git fetch --all --tags
        $commit = git rev-list -n 1 tags/${{ inputs.tag }}
        echo "commit=$commit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      shell: pwsh
      if: ${{ inputs.environment == 'prod' }}

    - name: download prod artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build-deploy-solution.yml
        commit: ${{ env.commit }}
        path: ${{ runner.temp }}/${{ inputs.solution_name }}
      if: ${{ inputs.environment == 'prod' }}

    - uses: Firenza/secrets-to-env@v1.1.0
      with:
          secrets: ${{ inputs.secrets }}

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["src/${{ inputs.solution_name }}/deploymentSettings.json"]'

    - name: get solution zip
      id: get-solution-zip
      shell: pwsh
      run: |
        # unmanaged means we are targeting a dev environment
        if ([System.Convert]::ToBoolean("${{ inputs.unmanaged }}")) {
          $files = Get-ChildItem -Path "${{ runner.temp }}/${{ inputs.solution_name }}" -Recurse | Where-Object{$_.Name.EndsWith('.zip') -and !$_.Name.EndsWith('_managed.zip')}
        }
        else {
          $files = Get-ChildItem -Path "${{ runner.temp }}/${{ inputs.solution_name }}" -Recurse | Where-Object{$_.Name.EndsWith('_managed.zip')}
        }
        
        $solutionZip = $files[0].Name
        echo "::set-output name=solution_zip::$solutionZip"     

    # In order to get the path to call pac directly, we need to use at least on action from microsoft/powerplatform-actions.
    # WhoAmI seems to be the best option.
    # TODO: remove this when we no longer need to use pac directly
    - name: who-am-i
      uses: microsoft/powerplatform-actions/who-am-i@v0
      with:
        environment-url: ${{ inputs.environment_url }}
        tenant-id: ${{ env.TENANT_ID }}
        app-id: ${{ env.CLIENT_ID }}
        client-secret: ${{ env.CLIENT_SECRET }}

    # need to drop to pac because actions don't yet support deployment-settings-file
    # TODO: use import-solution when deployment-settings-file is available
    - name: get-pac-path
      id: get-pac-path
      uses: ./.github/actions/get-pac-path
    
    - name: debug-pac-path
      shell: pwsh
      run: |
        echo "steps.get-pac-path.outputs.path: ${{ steps.get-pac-path.outputs.path }}"
        Get-ChildItem ${{ steps.get-pac-path.outputs.path }}

    # need to drop to pac because actions don't yet support deployment-settings-file
    # TODO: use import-solution when deployment-settings-file is available
    - name: import-solution-to-environment
      shell: pwsh
      run: |
        $env:PATH = $env:PATH + ":${{ steps.get-pac-path.outputs.path }}"
        pac auth create --name temp --url ${{ inputs.environment_url}} --tenant ${{ env.TENANT_ID }} --applicationId ${{ env.CLIENT_ID }} --clientSecret ${{ env.CLIENT_SECRET }}
        pac solution import --path ${{ runner.temp }}/${{ inputs.solution_name }}/${{ steps.get-solution-zip.outputs.solution_zip }} --force-overwrite true --settings-file src/${{ inputs.solution_name }}/deploymentSettings.json

    # - name: import-solution-to-environment
    #   uses: microsoft/powerplatform-actions/import-solution@v0
    #   with:
    #     environment-url: ${{ inputs.environment_url }}
    #     tenant-id: ${{ env.TENANT_ID }}
    #     app-id: ${{ env.CLIENT_ID }}
    #     client-secret: ${{ env.CLIENT_SECRET }}
    #     solution-file: ${{ runner.temp }}/${{ inputs.solution_name }}/${{ steps.get-solution-zip.outputs.solution_zip }}
    #     force-overwrite: true
    #     use-deployment-settings-file: true
    #     deployment-settings-file: src/${{ inputs.solution_name }}/deploymentSettings.json