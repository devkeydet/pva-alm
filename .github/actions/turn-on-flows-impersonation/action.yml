# THIS IS A WINDOWS ONLY ACTION BECAUSE THE POWERSHELL MODULES USED REQUIRE WINDOWS POWERSHELL
name: "turn on flows using impersonation"

description: "turn on flows using impersonation"

inputs:
  environment_url:
    description: 'URL of Power Platform environment to connect with; e.g. "https://test-env.crm.dynamics.com"'
    required: true
  tenant_id:
    description: "gets subdomain out of subdomain.domain.com"
    required: true
  app_id:
    description: 'The application id to authenticate with. Setting this input makes app_id, tenant_id and client_secret required; specifying alternate "username" credential set of inputs will result in an error.'
    required: true
  client_secret:
    description: "gets subdomain out of subdomain.domain.com"
    required: true
  solution_name:
    description: "name of the solution to turn flows on"
    required: true
  secrets:
    description: "secrets for replace token to find values to populate deployment settings file."
    required: true

runs:
  using: "composite"
  steps:
    - uses: Firenza/secrets-to-env@v1.1.0
      with:
        secrets: ${{ inputs.secrets }}

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["src/${{ inputs.solution_name }}/config/deploymentSettings.json"]'

    - name: Install and cache PowerShell modules
      id: psmodulecache
      uses: potatoqualitee/psmodulecache@v4
      with:
        modules-to-cache: Microsoft.Xrm.Data.PowerShell, Microsoft.PowerApps.Administration.PowerShell
        shell: powershell

    # Enable flows based on connection references
    # Flows can only be turned on if the user turning them on has permissions to connections being referenced by the connection reference
    # As of authoring this script, the Service Principal (SPN) we use to connect to the Dataverse API cannot turn on the Flow
    # The temporary workaround is use a brute force approach for now.  We use the identity of the connection for the first connection
    # reference we find to turn on the Flow.  This may have side effects or unintended consequences we haven't fully tested.
    - name: turn-on-flows-impersonation
      shell: powershell # windows, not cross platform pwsh
      env:
        environment_url: ${{ inputs.environment_url }}
        tenant_id: ${{ inputs.tenant_id }}
        app_id: ${{ inputs.app_id }}
        client_secret: ${{ inputs.client_secret }}
        solution_name: ${{ inputs.solution_name }}
        deployment_settings_file: "src/${{ inputs.solution_name }}/config/deploymentSettings.json"
      run: |
        Import-Module Microsoft.Xrm.Data.PowerShell
        Import-Module  Microsoft.PowerApps.Administration.PowerShell

        Add-PowerAppsAccount -TenantID "$env:tenant_id" -ApplicationId "$env:app_id" -ClientSecret "$env:client_secret"

        $connectionString = "AuthType=ClientSecret;url=$env:environment_url;ClientId=$env:app_id;ClientSecret=$env:client_secret"
        $conn = Get-CrmConnection -ConnectionString $connectionString
        $impersonationConn = Get-CrmConnection -ConnectionString $connectionString
              
        $environmentName = $conn.EnvironmentId
        $solutions = Get-CrmRecords -conn $conn -EntityLogicalName solution -FilterAttribute "uniquename" -FilterOperator "eq" -FilterValue "$env:solution_name"
        if($solutions.Count -gt 0) {
            $solutionId = $solutions.CrmRecords[0].solutionid
            $result = Get-CrmRecords -conn $conn -EntityLogicalName solutioncomponent -FilterAttribute "solutionid" -FilterOperator "eq" -FilterValue $solutionId -Fields objectid,componenttype
            $solutionComponents = $result.CrmRecords
            
            $deploymentSettings = Get-Content $env:deployment_settings_file | ConvertFrom-Json
            
            foreach ($connectionRefConfig in $deploymentSettings.ConnectionReferences) {
                if($connectionRefConfig.LogicalName -ne '' -and $connectionRefConfig.ConnectionId -ne '') {
                    # Get the connection reference
                    $connRefs = Get-CrmRecords -conn $conn -EntityLogicalName connectionreference -FilterAttribute "connectionreferencelogicalname" -FilterOperator "eq" -FilterValue $connectionRefConfig.LogicalName
                    if($connRefs.Count -gt 0) {      
                        # Get connection
                        $connections = Get-AdminPowerAppConnection -EnvironmentName $environmentName -Filter $connectionRefConfig.ConnectionId
                        
                        # Get Dataverse systemuserid for the system user that maps to the aad user guid that created the connection 
                        $systemusers = Get-CrmRecords -conn $conn -EntityLogicalName systemuser -FilterAttribute "azureactivedirectoryobjectid" -FilterOperator "eq" -FilterValue $connections[0].CreatedBy.id
                        if($systemusers.Count -gt 0) {
                            # Impersonate the Dataverse systemuser that created the connection when turning on the flow
                            $impersonationCallerId = $systemusers.CrmRecords[0].systemuserid
                            foreach ($solutionComponent in $solutionComponents){
                                if ($solutionComponent.componenttype -eq "Workflow"){
                                    $workflow = Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $solutionComponent.objectid -Fields clientdata,category,statecode
                                    if($workflow.clientdata.Contains($connectionRefConfig.LogicalName) -and $workflow.statecode -ne "Activated"){
                                        $impersonationConn.OrganizationWebProxyClient.CallerId = $impersonationCallerId 
                                        Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $solutionComponent.objectid -StateCode Activated -StatusCode Activated
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
