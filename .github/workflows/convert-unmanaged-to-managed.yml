# This pipeline gets triggered manually or via an API call.
# It is a general purpose automation that allows you to convert an unmanaged solution in a Dataverse environment to managed.
# You can then delete the managed soltuion to "clean" your environment of anything that was in the unmanaged solution.
# This is an irreversable action without then deleting the managed solution and importing an unmanaged one.

name: convert-unmanaged-to-managed

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "name of the Solution in Dataverse environment"
        required: true
        default: yoursolutionname
      environment_url:
        description: "http endpoint of your Dataverse environment"
        required: true
        default: "https://[your-env].crm[x].dynamics.com"

jobs:
  # Needs it's own job in order for build-deploy-solution->environment value to be used.
  get-environment-from-domain:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: get-subdomain
        uses: ./.github/actions/get-subdomain
        with:
          url: ${{ github.event.inputs.environment_url }}
    outputs:
      subdomain: ${{ steps.get-subdomain.outputs.subdomain }}

  convert-unmanaged-to-managed:
    runs-on: ubuntu-latest
    needs: get-environment-from-domain
    environment: ${{ needs.get-environment-from-domain.outputs.subdomain }}
    steps:
      - uses: actions/checkout@v2
      
      # Some Dataverse calls in this workflow cannot run async.  Therefore, they will fail
      # If someone runs more than one workflow against the environment at the same time.
      # To prevent this, wait for other workflows queued up to finish before continuing      
      - name: queue-environment
        id: queue-environment
        uses: devkeydet/action-environment-queue@v1
        with:
          environment: ${{ needs.get-environment-from-domain.outputs.subdomain }}
          
      - name: convert-unmanaged-to-managed
        uses: ./.github/actions/convert-unmanaged-to-managed
        with:
          solution_name: ${{ github.event.inputs.solution_name }}
          environment_url: ${{ github.event.inputs.environment_url }}
          tenant_id: ${{ secrets.TENANT_ID }}
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
