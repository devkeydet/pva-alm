name: determine-solution-build-deploy

on:
  pull_request:
    branches:
      - main
    paths:
      - src/**
  push:
    branches:
      - main
    paths:
      - src/**

env:
  solution_version_major_minor: "1.0"

jobs:
  determine-solution-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: update-pr-with-check-comment
        if: contains(github.ref, 'pull')
        uses: peter-evans/create-or-update-comment@v1.4.5
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            PR NOT READY FOR APPROVAL
            - Wait for another comment to appear after this one.
            - The workflow triggered by this PR starts another workflow that represents the actual PR validation workflow.
      - uses: actions/checkout@v2
      # determine if the build should go to the PR or UAT environment
      - name: uat env var
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          echo "environment=uat" >> $GITHUB_ENV
      - name: pr env var
        if: github.ref != 'refs/heads/main'
        shell: bash
        run: |
          echo "environment=pr" >> $GITHUB_ENV
      - id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: csv
      # check for file changes in solution source folder(s)
      # if found, queue build and deply workflow
      - shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #TODO: get working with GITHUB_TOKEN
          github_ref: ${{ github.ref }}
          pr_head_ref: ${{ github.event.pull_request.head.ref }}
          github_sha: ${{ github.sha }}
        run: |
          $files = "${{ steps.files.outputs.all }}"
          $filesArray = $files -split ','

          $solutionDirectoriesArray = [System.Collections.ArrayList]::new()

          foreach ($file in $filesArray) {         
            if ($file.StartsWith("src/") -And $file.Contains("SolutionPackage")) {
              $solutionDirectory = "{0}/{1}/{2}" -f $file.Split('/')
              $solutionDirectoriesArray.Add($solutionDirectory)
            }        
          }

          $uniqueSolutionDirectories = $solutionDirectoriesArray | Sort-Object | Get-Unique

          foreach ($dir in $uniqueSolutionDirectories) {            
            $solutionName = $dir.Replace("src/","").Replace("/SolutionPackage","")

            if ($env:github_ref.Contains("pull")) {
              $ref = $env:pr_head_ref
            }
            else {
              $ref = $env:github_ref
            }

            echo "github_ref: $env:github_ref"
            echo "ref: $ref"
            echo "sha: $env:github_sha"

            gh workflow run build-deploy-solution --ref $ref -f ref=$env:github_ref -f solution_name=$solutionName -f solution_version_major_minor=${{ env.solution_version_major_minor }} -f environment=${{ env.environment }}
            
            echo "pipeline queued for $solutionName"           
          }
