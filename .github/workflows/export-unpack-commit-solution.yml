name: export-unpack-commit-solution
# Export solution from DEV environment
#  unpack it, commit and push the changes

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "name of the Solution in Dataverse environment"
        required: true
        default: yoursolutionname
      environment_url:
        description: "http endpoint of your Dataverse environment"
        required: true
        default: "https://[your-env].crm.dynamics.com"
      source_branch:
        description: "source branch"
        required: true
        default: main
      branch_to_create:
        description: "branch to create"
        required: false
      commit_message:
        description: "message to provide for the commit"
        required: true

jobs:
  export-from-dev:
    runs-on: ubuntu-latest

    env:
      solution_export_folder: solution-export-temp
      solution_package_source: "src/${{ github.event.inputs.solution_name }}/SolutionPackage"

    steps:
      # Solutions cannot be exported/imported in parallel, so we queue
      - uses: ahmadnassri/action-workflow-queue@v1

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.source_branch }}

      # Until GitHub Actions for Power Platform doesn't require us to use pac direcly
      # for certain commands, we need to use it directly.  So we set the path to pac
      # that ships with the Actions
      - name: set-pac-path
        uses: ./.github/actions/set-pac-path

      - name: create new git branch
        if: github.event.inputs.branch_to_create != ''
        run: |
          git checkout -b ${{ github.event.inputs.branch_to_create }} ${{ github.event.inputs.source_branch }}

      # - name: publish customizations
      #   uses: microsoft/powerplatform-actions/publish-solution@v0
      #   with:
      #     environment-url: ${{ github.event.inputs.environment_url}}
      #     app-id: ${{ secrets.CLIENT_ID }}
      #     client-secret: ${{ secrets.CLIENT_SECRET }}
      #     tenant-id: ${{ secrets.TENANT_ID }}

      - name: export-unmanaged-solution
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ github.event.inputs.environment_url}}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ github.event.inputs.solution_name }}
          solution-output-file: ${{ runner.temp }}/${{ env.solution_export_folder }}/${{ github.event.inputs.solution_name }}.zip
          managed: false

      - name: export-managed-solution
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ github.event.inputs.environment_url}}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ github.event.inputs.solution_name }}
          solution-output-file: ${{ runner.temp }}/${{ env.solution_export_folder }}/${{ github.event.inputs.solution_name }}_managed.zip
          managed: true

      - name: unpack-solution action
        uses: microsoft/powerplatform-actions/unpack-solution@v0
        with:
          solution-file: ${{ runner.temp }}/${{ env.solution_export_folder }}/${{ github.event.inputs.solution_name }}.zip
          solution-folder: ${{ env.solution_package_source }}
          solution-type: "Both"
          overwrite-files: true

      - name: clear out solution version number
        shell: pwsh
        run: |
          Get-ChildItem -Path "${{ env.solution_package_source }}/**/Solution.xml" | 
          ForEach-Object {
                (Get-Content $_.FullName) `
                    -replace '<Version>[\s\S]*?<\/Version>', '<Version>0.0.0.0</Version>' |
                Out-File $_.FullName
          }

      - name: unpack msapp files
        shell: pwsh
        run: |
          Get-ChildItem -Path "${{ env.solution_package_source }}/CanvasApps" -Recurse -Filter *.msapp | 
          ForEach-Object {
              $unpackedPath = $_.FullName.Replace(".msapp", "_msapp_src")
              pac canvas unpack --msapp $_.FullName --sources $unpackedPath
              del $_.FullName
          }

      # TEMPORARY until platform/tools support formatted json files on unpack we
      # update the Power Automate json files to be pretty-print / formatted so they are easier to read in source control.
      # This also makes it easier to read changes from one commit to another
      - name: format json files
        shell: pwsh
        run: |
          Get-ChildItem -Path "${{ env.solution_package_source }}/Workflows" -Recurse -Filter *.json | 
          ForEach-Object {
            Write-Host $_.FullName
            $formatted = jq . $_.FullName --sort-keys
            $formatted | Out-File $_.FullName -Encoding UTF8
          }

      - name: commit changes
        run: |
          git config --global user.name ${{ github.actor }}   
          git add --all
          git commit -am "${{ github.event.inputs.commit_message }}"

      - name: push to ${{ github.event.inputs.source_branch }}
        if: github.event.inputs.branch_to_create == ''
        run: |
          git push

      - name: push to ${{ github.event.inputs.branch_to_create }}
        if: github.event.inputs.branch_to_create != ''
        run: |
          git push --set-upstream origin ${{ github.event.inputs.branch_to_create }}
